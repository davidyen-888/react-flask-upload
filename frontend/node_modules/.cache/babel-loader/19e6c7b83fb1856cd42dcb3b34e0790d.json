{"ast":null,"code":"// src/index.ts\nvar hasSetup = false;\nvar modality = null;\nvar hasEventBeforeFocus = false;\nvar handlers = /* @__PURE__ */new Set();\nvar isMac = typeof window !== \"undefined\" && window.navigator != null ? /^Mac/.test(window.navigator.platform) : false;\nfunction isValidKey(event) {\n  return !(event.metaKey || !isMac && event.altKey || event.ctrlKey);\n}\nfunction trigger(modality2, event) {\n  handlers.forEach(handler => handler(modality2, event));\n}\nfunction onKeyboardEvent(event) {\n  hasEventBeforeFocus = true;\n  if (isValidKey(event)) {\n    modality = \"keyboard\";\n    trigger(\"keyboard\", event);\n  }\n}\nfunction onPointerEvent(event) {\n  modality = \"pointer\";\n  if (event.type === \"mousedown\" || event.type === \"pointerdown\") {\n    hasEventBeforeFocus = true;\n    trigger(\"pointer\", event);\n  }\n}\nfunction onWindowFocus(event) {\n  if (event.target === window || event.target === document) {\n    return;\n  }\n  if (!hasEventBeforeFocus) {\n    modality = \"keyboard\";\n    trigger(\"keyboard\", event);\n  }\n  hasEventBeforeFocus = false;\n}\nfunction onWindowBlur() {\n  hasEventBeforeFocus = false;\n}\nfunction isFocusVisible() {\n  return modality !== \"pointer\";\n}\nfunction setupGlobalFocusEvents() {\n  if (typeof window === \"undefined\" || hasSetup) {\n    return;\n  }\n  const {\n    focus\n  } = HTMLElement.prototype;\n  HTMLElement.prototype.focus = function focusElement() {\n    hasEventBeforeFocus = true;\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    focus.apply(this, args);\n  };\n  document.addEventListener(\"keydown\", onKeyboardEvent, true);\n  document.addEventListener(\"keyup\", onKeyboardEvent, true);\n  window.addEventListener(\"focus\", onWindowFocus, true);\n  window.addEventListener(\"blur\", onWindowBlur, false);\n  if (typeof PointerEvent !== \"undefined\") {\n    document.addEventListener(\"pointerdown\", onPointerEvent, true);\n    document.addEventListener(\"pointermove\", onPointerEvent, true);\n    document.addEventListener(\"pointerup\", onPointerEvent, true);\n  } else {\n    document.addEventListener(\"mousedown\", onPointerEvent, true);\n    document.addEventListener(\"mousemove\", onPointerEvent, true);\n    document.addEventListener(\"mouseup\", onPointerEvent, true);\n  }\n  hasSetup = true;\n}\nfunction trackFocusVisible(fn) {\n  setupGlobalFocusEvents();\n  fn(isFocusVisible());\n  const handler = () => fn(isFocusVisible());\n  handlers.add(handler);\n  return () => {\n    handlers.delete(handler);\n  };\n}\nexport { trackFocusVisible };","map":{"version":3,"mappings":";AAKA,IAAIA,WAAW;AACf,IAAIC,WAA4B;AAChC,IAAIC,sBAAsB;AAE1B,IAAMC,WAAW,mBAAIC,KAAa;AAElC,IAAMC,QAAQ,OAAOC,WAAW,eAAeA,OAAOC,aAAa,OAAO,OAAOC,KAAKF,OAAOC,UAAUE,QAAQ,IAAI;AAEnH,oBAAoBC,OAAsB;EACxC,OAAO,EAAEA,MAAMC,WAAY,CAACN,SAASK,MAAME,UAAWF,MAAMG;AAC9D;AAEA,iBAAiBC,WAAoBJ,OAAqB;EACxDP,SAASY,QAASC,WAAYA,QAAQF,WAAUJ,KAAK,CAAC;AACxD;AAEA,yBAAyBA,OAAsB;EAC7CR,sBAAsB;EACtB,IAAIe,WAAWP,KAAK,GAAG;IACrBT,WAAW;IACXiB,QAAQ,YAAYR,KAAK;EAC3B;AACF;AAEA,wBAAwBA,OAAkC;EACxDT,WAAW;EACX,IAAIS,MAAMS,SAAS,eAAeT,MAAMS,SAAS,eAAe;IAC9DjB,sBAAsB;IACtBgB,QAAQ,WAAWR,KAAK;EAC1B;AACF;AAEA,uBAAuBA,OAAmB;EAIxC,IAAIA,MAAMU,WAAWd,UAAUI,MAAMU,WAAWC,UAAU;IACxD;EACF;EAIA,IAAI,CAACnB,qBAAqB;IACxBD,WAAW;IACXiB,QAAQ,YAAYR,KAAK;EAC3B;EAEAR,sBAAsB;AACxB;AAEA,wBAAwB;EAGtBA,sBAAsB;AACxB;AAEA,0BAA0B;EACxB,OAAOD,aAAa;AACtB;AAEA,kCAAkC;EAChC,IAAI,OAAOK,WAAW,eAAeN,UAAU;IAC7C;EACF;EAMA,MAAM;IAAEsB;EAAA,IAAUC,YAAYC;EAC9BD,YAAYC,UAAUF,QAAQ,wBAA+B;IAC3DpB,sBAAsB;IAAA,kCAD+BuB;MAAAA;IAAA;IAErDH,MAAMI,MAAM,MAAMD,IAAI;EACxB;EAEAJ,SAASM,iBAAiB,WAAWC,iBAAiB,IAAI;EAC1DP,SAASM,iBAAiB,SAASC,iBAAiB,IAAI;EAIxDtB,OAAOqB,iBAAiB,SAASE,eAAe,IAAI;EACpDvB,OAAOqB,iBAAiB,QAAQG,cAAc,KAAK;EAEnD,IAAI,OAAOC,iBAAiB,aAAa;IACvCV,SAASM,iBAAiB,eAAeK,gBAAgB,IAAI;IAC7DX,SAASM,iBAAiB,eAAeK,gBAAgB,IAAI;IAC7DX,SAASM,iBAAiB,aAAaK,gBAAgB,IAAI;EAC7D,OAAO;IACLX,SAASM,iBAAiB,aAAaK,gBAAgB,IAAI;IAC3DX,SAASM,iBAAiB,aAAaK,gBAAgB,IAAI;IAC3DX,SAASM,iBAAiB,WAAWK,gBAAgB,IAAI;EAC3D;EAEAhC,WAAW;AACb;AAEO,2BAA2BiC,IAA0B;EAC1DC,wBAAuB;EAEvBD,GAAGE,gBAAgB;EACnB,MAAMnB,UAAU,MAAMiB,GAAGE,gBAAgB;EAEzChC,SAASiC,IAAIpB,OAAO;EACpB,OAAO,MAAM;IACXb,SAASkC,OAAOrB,OAAO;EACzB;AACF","names":["hasSetup","modality","hasEventBeforeFocus","handlers","Set","isMac","window","navigator","test","platform","event","metaKey","altKey","ctrlKey","modality2","forEach","handler","isValidKey","trigger","type","target","document","focus","HTMLElement","prototype","args","apply","addEventListener","onKeyboardEvent","onWindowFocus","onWindowBlur","PointerEvent","onPointerEvent","fn","setupGlobalFocusEvents","isFocusVisible","add","delete"],"sources":["/Users/davidhsieh/Code/react-flask-upload/frontend/node_modules/@zag-js/focus-visible/src/index.ts"],"sourcesContent":["type Modality = \"keyboard\" | \"pointer\"\ntype HandlerEvent = PointerEvent | MouseEvent | KeyboardEvent | FocusEvent\ntype Handler = (modality: Modality, e: HandlerEvent) => void\ntype FocusVisibleCallback = (isFocusVisible: boolean) => void\n\nlet hasSetup = false\nlet modality: Modality | null = null\nlet hasEventBeforeFocus = false\n\nconst handlers = new Set<Handler>()\n\nconst isMac = typeof window !== \"undefined\" && window.navigator != null ? /^Mac/.test(window.navigator.platform) : false\n\nfunction isValidKey(event: KeyboardEvent) {\n  return !(event.metaKey || (!isMac && event.altKey) || event.ctrlKey)\n}\n\nfunction trigger(modality: Modality, event: HandlerEvent) {\n  handlers.forEach((handler) => handler(modality, event))\n}\n\nfunction onKeyboardEvent(event: KeyboardEvent) {\n  hasEventBeforeFocus = true\n  if (isValidKey(event)) {\n    modality = \"keyboard\"\n    trigger(\"keyboard\", event)\n  }\n}\n\nfunction onPointerEvent(event: PointerEvent | MouseEvent) {\n  modality = \"pointer\"\n  if (event.type === \"mousedown\" || event.type === \"pointerdown\") {\n    hasEventBeforeFocus = true\n    trigger(\"pointer\", event)\n  }\n}\n\nfunction onWindowFocus(event: FocusEvent) {\n  // Firefox fires two extra focus events when the user first clicks into an iframe:\n  // first on the window, then on the document. We ignore these events so they don't\n  // cause keyboard focus rings to appear.\n  if (event.target === window || event.target === document) {\n    return\n  }\n\n  // If a focus event occurs without a preceding keyboard or pointer event, switch to keyboard modality.\n  // This occurs, for example, when navigating a form with the next/previous buttons on iOS.\n  if (!hasEventBeforeFocus) {\n    modality = \"keyboard\"\n    trigger(\"keyboard\", event)\n  }\n\n  hasEventBeforeFocus = false\n}\n\nfunction onWindowBlur() {\n  // When the window is blurred, reset state. This is necessary when tabbing out of the window,\n  // for example, since a subsequent focus event won't be fired.\n  hasEventBeforeFocus = false\n}\n\nfunction isFocusVisible() {\n  return modality !== \"pointer\"\n}\n\nfunction setupGlobalFocusEvents() {\n  if (typeof window === \"undefined\" || hasSetup) {\n    return\n  }\n\n  // Programmatic focus() calls shouldn't affect the current input modality.\n  // However, we need to detect other cases when a focus event occurs without\n  // a preceding user event (e.g. screen reader focus). Overriding the focus\n  // method on HTMLElement.prototype is a bit hacky, but works.\n  const { focus } = HTMLElement.prototype\n  HTMLElement.prototype.focus = function focusElement(...args) {\n    hasEventBeforeFocus = true\n    focus.apply(this, args)\n  }\n\n  document.addEventListener(\"keydown\", onKeyboardEvent, true)\n  document.addEventListener(\"keyup\", onKeyboardEvent, true)\n\n  // Register focus events on the window so they are sure to happen\n  // before React's event listeners (registered on the document).\n  window.addEventListener(\"focus\", onWindowFocus, true)\n  window.addEventListener(\"blur\", onWindowBlur, false)\n\n  if (typeof PointerEvent !== \"undefined\") {\n    document.addEventListener(\"pointerdown\", onPointerEvent, true)\n    document.addEventListener(\"pointermove\", onPointerEvent, true)\n    document.addEventListener(\"pointerup\", onPointerEvent, true)\n  } else {\n    document.addEventListener(\"mousedown\", onPointerEvent, true)\n    document.addEventListener(\"mousemove\", onPointerEvent, true)\n    document.addEventListener(\"mouseup\", onPointerEvent, true)\n  }\n\n  hasSetup = true\n}\n\nexport function trackFocusVisible(fn: FocusVisibleCallback) {\n  setupGlobalFocusEvents()\n\n  fn(isFocusVisible())\n  const handler = () => fn(isFocusVisible())\n\n  handlers.add(handler)\n  return () => {\n    handlers.delete(handler)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}