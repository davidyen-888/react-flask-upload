{"ast":null,"code":"const identityProjection = \"translate3d(0px, 0px, 0) scale(1, 1) scale(1, 1)\";\nfunction buildProjectionTransform(delta, treeScale, latestTransform) {\n  /**\n   * The translations we use to calculate are always relative to the viewport coordinate space.\n   * But when we apply scales, we also scale the coordinate space of an element and its children.\n   * For instance if we have a treeScale (the culmination of all parent scales) of 0.5 and we need\n   * to move an element 100 pixels, we actually need to move it 200 in within that scaled space.\n   */\n  const xTranslate = delta.x.translate / treeScale.x;\n  const yTranslate = delta.y.translate / treeScale.y;\n  let transform = `translate3d(${xTranslate}px, ${yTranslate}px, 0) `;\n  /**\n   * Apply scale correction for the tree transform.\n   * This will apply scale to the screen-orientated axes.\n   */\n  transform += `scale(${1 / treeScale.x}, ${1 / treeScale.y}) `;\n  if (latestTransform) {\n    const {\n      rotate,\n      rotateX,\n      rotateY\n    } = latestTransform;\n    if (rotate) transform += `rotate(${rotate}deg) `;\n    if (rotateX) transform += `rotateX(${rotateX}deg) `;\n    if (rotateY) transform += `rotateY(${rotateY}deg) `;\n  }\n  /**\n   * Apply scale to match the size of the element to the size we want it.\n   * This will apply scale to the element-orientated axes.\n   */\n  const elementScaleX = delta.x.scale * treeScale.x;\n  const elementScaleY = delta.y.scale * treeScale.y;\n  transform += `scale(${elementScaleX}, ${elementScaleY})`;\n  return transform === identityProjection ? \"none\" : transform;\n}\nexport { buildProjectionTransform, identityProjection };","map":{"version":3,"names":["identityProjection","buildProjectionTransform","delta","treeScale","latestTransform","xTranslate","x","translate","yTranslate","y","transform","rotate","rotateX","rotateY","elementScaleX","scale","elementScaleY"],"sources":["/Users/davidhsieh/Code/react-flask-upload/frontend/node_modules/framer-motion/dist/es/projection/styles/transform.mjs"],"sourcesContent":["const identityProjection = \"translate3d(0px, 0px, 0) scale(1, 1) scale(1, 1)\";\nfunction buildProjectionTransform(delta, treeScale, latestTransform) {\n    /**\n     * The translations we use to calculate are always relative to the viewport coordinate space.\n     * But when we apply scales, we also scale the coordinate space of an element and its children.\n     * For instance if we have a treeScale (the culmination of all parent scales) of 0.5 and we need\n     * to move an element 100 pixels, we actually need to move it 200 in within that scaled space.\n     */\n    const xTranslate = delta.x.translate / treeScale.x;\n    const yTranslate = delta.y.translate / treeScale.y;\n    let transform = `translate3d(${xTranslate}px, ${yTranslate}px, 0) `;\n    /**\n     * Apply scale correction for the tree transform.\n     * This will apply scale to the screen-orientated axes.\n     */\n    transform += `scale(${1 / treeScale.x}, ${1 / treeScale.y}) `;\n    if (latestTransform) {\n        const { rotate, rotateX, rotateY } = latestTransform;\n        if (rotate)\n            transform += `rotate(${rotate}deg) `;\n        if (rotateX)\n            transform += `rotateX(${rotateX}deg) `;\n        if (rotateY)\n            transform += `rotateY(${rotateY}deg) `;\n    }\n    /**\n     * Apply scale to match the size of the element to the size we want it.\n     * This will apply scale to the element-orientated axes.\n     */\n    const elementScaleX = delta.x.scale * treeScale.x;\n    const elementScaleY = delta.y.scale * treeScale.y;\n    transform += `scale(${elementScaleX}, ${elementScaleY})`;\n    return transform === identityProjection ? \"none\" : transform;\n}\n\nexport { buildProjectionTransform, identityProjection };\n"],"mappings":"AAAA,MAAMA,kBAAkB,GAAG,kDAAkD;AAC7E,SAASC,wBAAwB,CAACC,KAAK,EAAEC,SAAS,EAAEC,eAAe,EAAE;EACjE;AACJ;AACA;AACA;AACA;AACA;EACI,MAAMC,UAAU,GAAGH,KAAK,CAACI,CAAC,CAACC,SAAS,GAAGJ,SAAS,CAACG,CAAC;EAClD,MAAME,UAAU,GAAGN,KAAK,CAACO,CAAC,CAACF,SAAS,GAAGJ,SAAS,CAACM,CAAC;EAClD,IAAIC,SAAS,GAAI,eAAcL,UAAW,OAAMG,UAAW,SAAQ;EACnE;AACJ;AACA;AACA;EACIE,SAAS,IAAK,SAAQ,CAAC,GAAGP,SAAS,CAACG,CAAE,KAAI,CAAC,GAAGH,SAAS,CAACM,CAAE,IAAG;EAC7D,IAAIL,eAAe,EAAE;IACjB,MAAM;MAAEO,MAAM;MAAEC,OAAO;MAAEC;IAAQ,CAAC,GAAGT,eAAe;IACpD,IAAIO,MAAM,EACND,SAAS,IAAK,UAASC,MAAO,OAAM;IACxC,IAAIC,OAAO,EACPF,SAAS,IAAK,WAAUE,OAAQ,OAAM;IAC1C,IAAIC,OAAO,EACPH,SAAS,IAAK,WAAUG,OAAQ,OAAM;EAC9C;EACA;AACJ;AACA;AACA;EACI,MAAMC,aAAa,GAAGZ,KAAK,CAACI,CAAC,CAACS,KAAK,GAAGZ,SAAS,CAACG,CAAC;EACjD,MAAMU,aAAa,GAAGd,KAAK,CAACO,CAAC,CAACM,KAAK,GAAGZ,SAAS,CAACM,CAAC;EACjDC,SAAS,IAAK,SAAQI,aAAc,KAAIE,aAAc,GAAE;EACxD,OAAON,SAAS,KAAKV,kBAAkB,GAAG,MAAM,GAAGU,SAAS;AAChE;AAEA,SAAST,wBAAwB,EAAED,kBAAkB"},"metadata":{},"sourceType":"module"}