{"ast":null,"code":"import { mix, progress, clamp } from 'popmotion';\nimport { calcLength } from '../../../projection/geometry/delta-calc.mjs';\n\n/**\n * Apply constraints to a point. These constraints are both physical along an\n * axis, and an elastic factor that determines how much to constrain the point\n * by if it does lie outside the defined parameters.\n */\nfunction applyConstraints(point, _ref, elastic) {\n  let {\n    min,\n    max\n  } = _ref;\n  if (min !== undefined && point < min) {\n    // If we have a min point defined, and this is outside of that, constrain\n    point = elastic ? mix(min, point, elastic.min) : Math.max(point, min);\n  } else if (max !== undefined && point > max) {\n    // If we have a max point defined, and this is outside of that, constrain\n    point = elastic ? mix(max, point, elastic.max) : Math.min(point, max);\n  }\n  return point;\n}\n/**\n * Calculate constraints in terms of the viewport when defined relatively to the\n * measured axis. This is measured from the nearest edge, so a max constraint of 200\n * on an axis with a max value of 300 would return a constraint of 500 - axis length\n */\nfunction calcRelativeAxisConstraints(axis, min, max) {\n  return {\n    min: min !== undefined ? axis.min + min : undefined,\n    max: max !== undefined ? axis.max + max - (axis.max - axis.min) : undefined\n  };\n}\n/**\n * Calculate constraints in terms of the viewport when\n * defined relatively to the measured bounding box.\n */\nfunction calcRelativeConstraints(layoutBox, _ref2) {\n  let {\n    top,\n    left,\n    bottom,\n    right\n  } = _ref2;\n  return {\n    x: calcRelativeAxisConstraints(layoutBox.x, left, right),\n    y: calcRelativeAxisConstraints(layoutBox.y, top, bottom)\n  };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative axis\n */\nfunction calcViewportAxisConstraints(layoutAxis, constraintsAxis) {\n  let min = constraintsAxis.min - layoutAxis.min;\n  let max = constraintsAxis.max - layoutAxis.max;\n  // If the constraints axis is actually smaller than the layout axis then we can\n  // flip the constraints\n  if (constraintsAxis.max - constraintsAxis.min < layoutAxis.max - layoutAxis.min) {\n    [min, max] = [max, min];\n  }\n  return {\n    min,\n    max\n  };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative box\n */\nfunction calcViewportConstraints(layoutBox, constraintsBox) {\n  return {\n    x: calcViewportAxisConstraints(layoutBox.x, constraintsBox.x),\n    y: calcViewportAxisConstraints(layoutBox.y, constraintsBox.y)\n  };\n}\n/**\n * Calculate a transform origin relative to the source axis, between 0-1, that results\n * in an asthetically pleasing scale/transform needed to project from source to target.\n */\nfunction calcOrigin(source, target) {\n  let origin = 0.5;\n  const sourceLength = calcLength(source);\n  const targetLength = calcLength(target);\n  if (targetLength > sourceLength) {\n    origin = progress(target.min, target.max - sourceLength, source.min);\n  } else if (sourceLength > targetLength) {\n    origin = progress(source.min, source.max - targetLength, target.min);\n  }\n  return clamp(0, 1, origin);\n}\n/**\n * Rebase the calculated viewport constraints relative to the layout.min point.\n */\nfunction rebaseAxisConstraints(layout, constraints) {\n  const relativeConstraints = {};\n  if (constraints.min !== undefined) {\n    relativeConstraints.min = constraints.min - layout.min;\n  }\n  if (constraints.max !== undefined) {\n    relativeConstraints.max = constraints.max - layout.min;\n  }\n  return relativeConstraints;\n}\nconst defaultElastic = 0.35;\n/**\n * Accepts a dragElastic prop and returns resolved elastic values for each axis.\n */\nfunction resolveDragElastic() {\n  let dragElastic = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultElastic;\n  if (dragElastic === false) {\n    dragElastic = 0;\n  } else if (dragElastic === true) {\n    dragElastic = defaultElastic;\n  }\n  return {\n    x: resolveAxisElastic(dragElastic, \"left\", \"right\"),\n    y: resolveAxisElastic(dragElastic, \"top\", \"bottom\")\n  };\n}\nfunction resolveAxisElastic(dragElastic, minLabel, maxLabel) {\n  return {\n    min: resolvePointElastic(dragElastic, minLabel),\n    max: resolvePointElastic(dragElastic, maxLabel)\n  };\n}\nfunction resolvePointElastic(dragElastic, label) {\n  var _a;\n  return typeof dragElastic === \"number\" ? dragElastic : (_a = dragElastic[label]) !== null && _a !== void 0 ? _a : 0;\n}\nexport { applyConstraints, calcOrigin, calcRelativeAxisConstraints, calcRelativeConstraints, calcViewportAxisConstraints, calcViewportConstraints, defaultElastic, rebaseAxisConstraints, resolveAxisElastic, resolveDragElastic, resolvePointElastic };","map":{"version":3,"names":["mix","progress","clamp","calcLength","applyConstraints","point","elastic","min","max","undefined","Math","calcRelativeAxisConstraints","axis","calcRelativeConstraints","layoutBox","top","left","bottom","right","x","y","calcViewportAxisConstraints","layoutAxis","constraintsAxis","calcViewportConstraints","constraintsBox","calcOrigin","source","target","origin","sourceLength","targetLength","rebaseAxisConstraints","layout","constraints","relativeConstraints","defaultElastic","resolveDragElastic","dragElastic","resolveAxisElastic","minLabel","maxLabel","resolvePointElastic","label","_a"],"sources":["/Users/davidhsieh/Code/react-flask-upload/frontend/node_modules/framer-motion/dist/es/gestures/drag/utils/constraints.mjs"],"sourcesContent":["import { mix, progress, clamp } from 'popmotion';\nimport { calcLength } from '../../../projection/geometry/delta-calc.mjs';\n\n/**\n * Apply constraints to a point. These constraints are both physical along an\n * axis, and an elastic factor that determines how much to constrain the point\n * by if it does lie outside the defined parameters.\n */\nfunction applyConstraints(point, { min, max }, elastic) {\n    if (min !== undefined && point < min) {\n        // If we have a min point defined, and this is outside of that, constrain\n        point = elastic ? mix(min, point, elastic.min) : Math.max(point, min);\n    }\n    else if (max !== undefined && point > max) {\n        // If we have a max point defined, and this is outside of that, constrain\n        point = elastic ? mix(max, point, elastic.max) : Math.min(point, max);\n    }\n    return point;\n}\n/**\n * Calculate constraints in terms of the viewport when defined relatively to the\n * measured axis. This is measured from the nearest edge, so a max constraint of 200\n * on an axis with a max value of 300 would return a constraint of 500 - axis length\n */\nfunction calcRelativeAxisConstraints(axis, min, max) {\n    return {\n        min: min !== undefined ? axis.min + min : undefined,\n        max: max !== undefined\n            ? axis.max + max - (axis.max - axis.min)\n            : undefined,\n    };\n}\n/**\n * Calculate constraints in terms of the viewport when\n * defined relatively to the measured bounding box.\n */\nfunction calcRelativeConstraints(layoutBox, { top, left, bottom, right }) {\n    return {\n        x: calcRelativeAxisConstraints(layoutBox.x, left, right),\n        y: calcRelativeAxisConstraints(layoutBox.y, top, bottom),\n    };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative axis\n */\nfunction calcViewportAxisConstraints(layoutAxis, constraintsAxis) {\n    let min = constraintsAxis.min - layoutAxis.min;\n    let max = constraintsAxis.max - layoutAxis.max;\n    // If the constraints axis is actually smaller than the layout axis then we can\n    // flip the constraints\n    if (constraintsAxis.max - constraintsAxis.min <\n        layoutAxis.max - layoutAxis.min) {\n        [min, max] = [max, min];\n    }\n    return { min, max };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative box\n */\nfunction calcViewportConstraints(layoutBox, constraintsBox) {\n    return {\n        x: calcViewportAxisConstraints(layoutBox.x, constraintsBox.x),\n        y: calcViewportAxisConstraints(layoutBox.y, constraintsBox.y),\n    };\n}\n/**\n * Calculate a transform origin relative to the source axis, between 0-1, that results\n * in an asthetically pleasing scale/transform needed to project from source to target.\n */\nfunction calcOrigin(source, target) {\n    let origin = 0.5;\n    const sourceLength = calcLength(source);\n    const targetLength = calcLength(target);\n    if (targetLength > sourceLength) {\n        origin = progress(target.min, target.max - sourceLength, source.min);\n    }\n    else if (sourceLength > targetLength) {\n        origin = progress(source.min, source.max - targetLength, target.min);\n    }\n    return clamp(0, 1, origin);\n}\n/**\n * Rebase the calculated viewport constraints relative to the layout.min point.\n */\nfunction rebaseAxisConstraints(layout, constraints) {\n    const relativeConstraints = {};\n    if (constraints.min !== undefined) {\n        relativeConstraints.min = constraints.min - layout.min;\n    }\n    if (constraints.max !== undefined) {\n        relativeConstraints.max = constraints.max - layout.min;\n    }\n    return relativeConstraints;\n}\nconst defaultElastic = 0.35;\n/**\n * Accepts a dragElastic prop and returns resolved elastic values for each axis.\n */\nfunction resolveDragElastic(dragElastic = defaultElastic) {\n    if (dragElastic === false) {\n        dragElastic = 0;\n    }\n    else if (dragElastic === true) {\n        dragElastic = defaultElastic;\n    }\n    return {\n        x: resolveAxisElastic(dragElastic, \"left\", \"right\"),\n        y: resolveAxisElastic(dragElastic, \"top\", \"bottom\"),\n    };\n}\nfunction resolveAxisElastic(dragElastic, minLabel, maxLabel) {\n    return {\n        min: resolvePointElastic(dragElastic, minLabel),\n        max: resolvePointElastic(dragElastic, maxLabel),\n    };\n}\nfunction resolvePointElastic(dragElastic, label) {\n    var _a;\n    return typeof dragElastic === \"number\"\n        ? dragElastic\n        : (_a = dragElastic[label]) !== null && _a !== void 0 ? _a : 0;\n}\n\nexport { applyConstraints, calcOrigin, calcRelativeAxisConstraints, calcRelativeConstraints, calcViewportAxisConstraints, calcViewportConstraints, defaultElastic, rebaseAxisConstraints, resolveAxisElastic, resolveDragElastic, resolvePointElastic };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}