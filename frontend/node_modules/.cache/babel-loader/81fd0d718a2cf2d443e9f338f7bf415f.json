{"ast":null,"code":"import { visualElement } from '../index.mjs';\nimport { getOrigin, checkTargetForNewValues } from '../utils/setters.mjs';\nimport { buildHTMLStyles } from './utils/build-styles.mjs';\nimport { isCSSVariable } from '../dom/utils/is-css-variable.mjs';\nimport { parseDomVariant } from '../dom/utils/parse-dom-variant.mjs';\nimport { transformProps } from './utils/transform.mjs';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\nimport { renderHTML } from './utils/render.mjs';\nimport { getDefaultValueType } from '../dom/value-types/defaults.mjs';\nimport { measureViewportBox } from '../../projection/utils/measure.mjs';\nfunction getComputedStyle(element) {\n  return window.getComputedStyle(element);\n}\nconst htmlConfig = {\n  treeType: \"dom\",\n  readValueFromInstance(domElement, key) {\n    if (transformProps.has(key)) {\n      const defaultType = getDefaultValueType(key);\n      return defaultType ? defaultType.default || 0 : 0;\n    } else {\n      const computedStyle = getComputedStyle(domElement);\n      const value = (isCSSVariable(key) ? computedStyle.getPropertyValue(key) : computedStyle[key]) || 0;\n      return typeof value === \"string\" ? value.trim() : value;\n    }\n  },\n  sortNodePosition(a, b) {\n    /**\n     * compareDocumentPosition returns a bitmask, by using the bitwise &\n     * we're returning true if 2 in that bitmask is set to true. 2 is set\n     * to true if b preceeds a.\n     */\n    return a.compareDocumentPosition(b) & 2 ? 1 : -1;\n  },\n  getBaseTarget(props, key) {\n    var _a;\n    return (_a = props.style) === null || _a === void 0 ? void 0 : _a[key];\n  },\n  measureViewportBox(element, _ref) {\n    let {\n      transformPagePoint\n    } = _ref;\n    return measureViewportBox(element, transformPagePoint);\n  },\n  /**\n   * Reset the transform on the current Element. This is called as part\n   * of a batched process across the entire layout tree. To remove this write\n   * cycle it'd be interesting to see if it's possible to \"undo\" all the current\n   * layout transforms up the tree in the same way this.getBoundingBoxWithoutTransforms\n   * works\n   */\n  resetTransform(element, domElement, props) {\n    const {\n      transformTemplate\n    } = props;\n    domElement.style.transform = transformTemplate ? transformTemplate({}, \"\") : \"none\";\n    // Ensure that whatever happens next, we restore our transform on the next frame\n    element.scheduleRender();\n  },\n  restoreTransform(instance, mutableState) {\n    instance.style.transform = mutableState.style.transform;\n  },\n  removeValueFromRenderState(key, _ref2) {\n    let {\n      vars,\n      style\n    } = _ref2;\n    delete vars[key];\n    delete style[key];\n  },\n  /**\n   * Ensure that HTML and Framer-specific value types like `px`->`%` and `Color`\n   * can be animated by Motion.\n   */\n  makeTargetAnimatable(element, _ref3, _ref4) {\n    let {\n      transition,\n      transitionEnd,\n      ...target\n    } = _ref3;\n    let {\n      transformValues\n    } = _ref4;\n    let isMounted = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    let origin = getOrigin(target, transition || {}, element);\n    /**\n     * If Framer has provided a function to convert `Color` etc value types, convert them\n     */\n    if (transformValues) {\n      if (transitionEnd) transitionEnd = transformValues(transitionEnd);\n      if (target) target = transformValues(target);\n      if (origin) origin = transformValues(origin);\n    }\n    if (isMounted) {\n      checkTargetForNewValues(element, target, origin);\n      const parsed = parseDomVariant(element, target, origin, transitionEnd);\n      transitionEnd = parsed.transitionEnd;\n      target = parsed.target;\n    }\n    return {\n      transition,\n      transitionEnd,\n      ...target\n    };\n  },\n  scrapeMotionValuesFromProps,\n  build(element, renderState, latestValues, options, props) {\n    if (element.isVisible !== undefined) {\n      renderState.style.visibility = element.isVisible ? \"visible\" : \"hidden\";\n    }\n    buildHTMLStyles(renderState, latestValues, options, props.transformTemplate);\n  },\n  render: renderHTML\n};\nconst htmlVisualElement = visualElement(htmlConfig);\nexport { getComputedStyle, htmlConfig, htmlVisualElement };","map":{"version":3,"names":["visualElement","getOrigin","checkTargetForNewValues","buildHTMLStyles","isCSSVariable","parseDomVariant","transformProps","scrapeMotionValuesFromProps","renderHTML","getDefaultValueType","measureViewportBox","getComputedStyle","element","window","htmlConfig","treeType","readValueFromInstance","domElement","key","has","defaultType","default","computedStyle","value","getPropertyValue","trim","sortNodePosition","a","b","compareDocumentPosition","getBaseTarget","props","_a","style","transformPagePoint","resetTransform","transformTemplate","transform","scheduleRender","restoreTransform","instance","mutableState","removeValueFromRenderState","vars","makeTargetAnimatable","transition","transitionEnd","target","transformValues","isMounted","origin","parsed","build","renderState","latestValues","options","isVisible","undefined","visibility","render","htmlVisualElement"],"sources":["/Users/davidhsieh/Code/react-flask-upload/frontend/node_modules/framer-motion/dist/es/render/html/visual-element.mjs"],"sourcesContent":["import { visualElement } from '../index.mjs';\nimport { getOrigin, checkTargetForNewValues } from '../utils/setters.mjs';\nimport { buildHTMLStyles } from './utils/build-styles.mjs';\nimport { isCSSVariable } from '../dom/utils/is-css-variable.mjs';\nimport { parseDomVariant } from '../dom/utils/parse-dom-variant.mjs';\nimport { transformProps } from './utils/transform.mjs';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\nimport { renderHTML } from './utils/render.mjs';\nimport { getDefaultValueType } from '../dom/value-types/defaults.mjs';\nimport { measureViewportBox } from '../../projection/utils/measure.mjs';\n\nfunction getComputedStyle(element) {\n    return window.getComputedStyle(element);\n}\nconst htmlConfig = {\n    treeType: \"dom\",\n    readValueFromInstance(domElement, key) {\n        if (transformProps.has(key)) {\n            const defaultType = getDefaultValueType(key);\n            return defaultType ? defaultType.default || 0 : 0;\n        }\n        else {\n            const computedStyle = getComputedStyle(domElement);\n            const value = (isCSSVariable(key)\n                ? computedStyle.getPropertyValue(key)\n                : computedStyle[key]) || 0;\n            return typeof value === \"string\" ? value.trim() : value;\n        }\n    },\n    sortNodePosition(a, b) {\n        /**\n         * compareDocumentPosition returns a bitmask, by using the bitwise &\n         * we're returning true if 2 in that bitmask is set to true. 2 is set\n         * to true if b preceeds a.\n         */\n        return a.compareDocumentPosition(b) & 2 ? 1 : -1;\n    },\n    getBaseTarget(props, key) {\n        var _a;\n        return (_a = props.style) === null || _a === void 0 ? void 0 : _a[key];\n    },\n    measureViewportBox(element, { transformPagePoint }) {\n        return measureViewportBox(element, transformPagePoint);\n    },\n    /**\n     * Reset the transform on the current Element. This is called as part\n     * of a batched process across the entire layout tree. To remove this write\n     * cycle it'd be interesting to see if it's possible to \"undo\" all the current\n     * layout transforms up the tree in the same way this.getBoundingBoxWithoutTransforms\n     * works\n     */\n    resetTransform(element, domElement, props) {\n        const { transformTemplate } = props;\n        domElement.style.transform = transformTemplate\n            ? transformTemplate({}, \"\")\n            : \"none\";\n        // Ensure that whatever happens next, we restore our transform on the next frame\n        element.scheduleRender();\n    },\n    restoreTransform(instance, mutableState) {\n        instance.style.transform = mutableState.style.transform;\n    },\n    removeValueFromRenderState(key, { vars, style }) {\n        delete vars[key];\n        delete style[key];\n    },\n    /**\n     * Ensure that HTML and Framer-specific value types like `px`->`%` and `Color`\n     * can be animated by Motion.\n     */\n    makeTargetAnimatable(element, { transition, transitionEnd, ...target }, { transformValues }, isMounted = true) {\n        let origin = getOrigin(target, transition || {}, element);\n        /**\n         * If Framer has provided a function to convert `Color` etc value types, convert them\n         */\n        if (transformValues) {\n            if (transitionEnd)\n                transitionEnd = transformValues(transitionEnd);\n            if (target)\n                target = transformValues(target);\n            if (origin)\n                origin = transformValues(origin);\n        }\n        if (isMounted) {\n            checkTargetForNewValues(element, target, origin);\n            const parsed = parseDomVariant(element, target, origin, transitionEnd);\n            transitionEnd = parsed.transitionEnd;\n            target = parsed.target;\n        }\n        return {\n            transition,\n            transitionEnd,\n            ...target,\n        };\n    },\n    scrapeMotionValuesFromProps,\n    build(element, renderState, latestValues, options, props) {\n        if (element.isVisible !== undefined) {\n            renderState.style.visibility = element.isVisible\n                ? \"visible\"\n                : \"hidden\";\n        }\n        buildHTMLStyles(renderState, latestValues, options, props.transformTemplate);\n    },\n    render: renderHTML,\n};\nconst htmlVisualElement = visualElement(htmlConfig);\n\nexport { getComputedStyle, htmlConfig, htmlVisualElement };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}