{"ast":null,"code":"import { __rest } from 'tslib';\nimport { invariant } from 'hey-listen';\nimport { noop } from '@motionone/utils';\nimport { animateStyle } from '../animate/animate-style.es.js';\nimport { style } from '../animate/style.es.js';\nimport { getOptions } from '../animate/utils/options.es.js';\nimport { hasChanged } from './utils/has-changed.es.js';\nimport { resolveVariant } from './utils/resolve-variant.es.js';\nimport { scheduleAnimation, unscheduleAnimation } from './utils/schedule.es.js';\nimport { inView } from './gestures/in-view.es.js';\nimport { hover } from './gestures/hover.es.js';\nimport { press } from './gestures/press.es.js';\nimport { motionEvent } from './utils/events.es.js';\nconst gestures = {\n  inView,\n  hover,\n  press\n};\n/**\n * A list of state types, in priority order. If a value is defined in\n * a righter-most type, it will override any definition in a lefter-most.\n */\nconst stateTypes = [\"initial\", \"animate\", ...Object.keys(gestures), \"exit\"];\n/**\n * A global store of all generated motion states. This can be used to lookup\n * a motion state for a given Element.\n */\nconst mountedStates = new WeakMap();\nfunction createMotionState() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let parent = arguments.length > 1 ? arguments[1] : undefined;\n  /**\n   * The element represented by the motion state. This is an empty reference\n   * when we create the state to support SSR and allow for later mounting\n   * in view libraries.\n   *\n   * @ts-ignore\n   */\n  let element;\n  /**\n   * Calculate a depth that we can use to order motion states by tree depth.\n   */\n  let depth = parent ? parent.getDepth() + 1 : 0;\n  /**\n   * Track which states are currently active.\n   */\n  const activeStates = {\n    initial: true,\n    animate: true\n  };\n  /**\n   * A map of functions that, when called, will remove event listeners for\n   * a given gesture.\n   */\n  const gestureSubscriptions = {};\n  /**\n   * Initialise a context to share through motion states. This\n   * will be populated by variant names (if any).\n   */\n  const context = {};\n  for (const name of stateTypes) {\n    context[name] = typeof options[name] === \"string\" ? options[name] : parent === null || parent === void 0 ? void 0 : parent.getContext()[name];\n  }\n  /**\n   * If initial is set to false we use the animate prop as the initial\n   * animation state.\n   */\n  const initialVariantSource = options.initial === false ? \"animate\" : \"initial\";\n  /**\n   * Destructure an initial target out from the resolved initial variant.\n   */\n  let _a = resolveVariant(options[initialVariantSource] || context[initialVariantSource], options.variants) || {},\n    target = __rest(_a, [\"transition\"]);\n  /**\n   * The base target is a cached map of values that we'll use to animate\n   * back to if a value is removed from all active state types. This\n   * is usually the initial value as read from the DOM, for instance if\n   * it hasn't been defined in initial.\n   */\n  const baseTarget = Object.assign({}, target);\n  /**\n   * A generator that will be processed by the global animation scheduler.\n   * This yeilds when it switches from reading the DOM to writing to it\n   * to prevent layout thrashing.\n   */\n  function* animateUpdates() {\n    var _a, _b;\n    const prevTarget = target;\n    target = {};\n    const animationOptions = {};\n    for (const name of stateTypes) {\n      if (!activeStates[name]) continue;\n      const variant = resolveVariant(options[name]);\n      if (!variant) continue;\n      for (const key in variant) {\n        if (key === \"transition\") continue;\n        target[key] = variant[key];\n        animationOptions[key] = getOptions((_b = (_a = variant.transition) !== null && _a !== void 0 ? _a : options.transition) !== null && _b !== void 0 ? _b : {}, key);\n      }\n    }\n    const allTargetKeys = new Set([...Object.keys(target), ...Object.keys(prevTarget)]);\n    const animationFactories = [];\n    allTargetKeys.forEach(key => {\n      var _a;\n      if (target[key] === undefined) {\n        target[key] = baseTarget[key];\n      }\n      if (hasChanged(prevTarget[key], target[key])) {\n        (_a = baseTarget[key]) !== null && _a !== void 0 ? _a : baseTarget[key] = style.get(element, key);\n        animationFactories.push(animateStyle(element, key, target[key], animationOptions[key]));\n      }\n    });\n    // Wait for all animation states to read from the DOM\n    yield;\n    const animations = animationFactories.map(factory => factory()).filter(Boolean);\n    if (!animations.length) return;\n    const animationTarget = target;\n    element.dispatchEvent(motionEvent(\"motionstart\", animationTarget));\n    Promise.all(animations.map(animation => animation.finished)).then(() => {\n      element.dispatchEvent(motionEvent(\"motioncomplete\", animationTarget));\n    }).catch(noop);\n  }\n  const setGesture = (name, isActive) => () => {\n    activeStates[name] = isActive;\n    scheduleAnimation(state);\n  };\n  const updateGestureSubscriptions = () => {\n    for (const name in gestures) {\n      const isGestureActive = gestures[name].isActive(options);\n      const remove = gestureSubscriptions[name];\n      if (isGestureActive && !remove) {\n        gestureSubscriptions[name] = gestures[name].subscribe(element, {\n          enable: setGesture(name, true),\n          disable: setGesture(name, false)\n        }, options);\n      } else if (!isGestureActive && remove) {\n        remove();\n        delete gestureSubscriptions[name];\n      }\n    }\n  };\n  const state = {\n    update: newOptions => {\n      if (!element) return;\n      options = newOptions;\n      updateGestureSubscriptions();\n      scheduleAnimation(state);\n    },\n    setActive: (name, isActive) => {\n      if (!element) return;\n      activeStates[name] = isActive;\n      scheduleAnimation(state);\n    },\n    animateUpdates,\n    getDepth: () => depth,\n    getTarget: () => target,\n    getOptions: () => options,\n    getContext: () => context,\n    mount: newElement => {\n      invariant(Boolean(newElement), \"Animation state must be mounted with valid Element\");\n      element = newElement;\n      mountedStates.set(element, state);\n      updateGestureSubscriptions();\n      return () => {\n        mountedStates.delete(element);\n        unscheduleAnimation(state);\n        for (const key in gestureSubscriptions) {\n          gestureSubscriptions[key]();\n        }\n      };\n    },\n    isMounted: () => Boolean(element)\n  };\n  return state;\n}\nexport { createMotionState, mountedStates };","map":{"version":3,"names":["__rest","invariant","noop","animateStyle","style","getOptions","hasChanged","resolveVariant","scheduleAnimation","unscheduleAnimation","inView","hover","press","motionEvent","gestures","stateTypes","Object","keys","mountedStates","WeakMap","createMotionState","options","parent","element","depth","getDepth","activeStates","initial","animate","gestureSubscriptions","context","name","getContext","initialVariantSource","_a","variants","target","baseTarget","assign","animateUpdates","_b","prevTarget","animationOptions","variant","key","transition","allTargetKeys","Set","animationFactories","forEach","undefined","get","push","animations","map","factory","filter","Boolean","length","animationTarget","dispatchEvent","Promise","all","animation","finished","then","catch","setGesture","isActive","state","updateGestureSubscriptions","isGestureActive","remove","subscribe","enable","disable","update","newOptions","setActive","getTarget","mount","newElement","set","delete","isMounted"],"sources":["/Users/davidhsieh/Code/react-flask-upload/frontend/node_modules/@motionone/dom/dist/state/index.es.js"],"sourcesContent":["import { __rest } from 'tslib';\nimport { invariant } from 'hey-listen';\nimport { noop } from '@motionone/utils';\nimport { animateStyle } from '../animate/animate-style.es.js';\nimport { style } from '../animate/style.es.js';\nimport { getOptions } from '../animate/utils/options.es.js';\nimport { hasChanged } from './utils/has-changed.es.js';\nimport { resolveVariant } from './utils/resolve-variant.es.js';\nimport { scheduleAnimation, unscheduleAnimation } from './utils/schedule.es.js';\nimport { inView } from './gestures/in-view.es.js';\nimport { hover } from './gestures/hover.es.js';\nimport { press } from './gestures/press.es.js';\nimport { motionEvent } from './utils/events.es.js';\n\nconst gestures = { inView, hover, press };\n/**\n * A list of state types, in priority order. If a value is defined in\n * a righter-most type, it will override any definition in a lefter-most.\n */\nconst stateTypes = [\"initial\", \"animate\", ...Object.keys(gestures), \"exit\"];\n/**\n * A global store of all generated motion states. This can be used to lookup\n * a motion state for a given Element.\n */\nconst mountedStates = new WeakMap();\nfunction createMotionState(options = {}, parent) {\n    /**\n     * The element represented by the motion state. This is an empty reference\n     * when we create the state to support SSR and allow for later mounting\n     * in view libraries.\n     *\n     * @ts-ignore\n     */\n    let element;\n    /**\n     * Calculate a depth that we can use to order motion states by tree depth.\n     */\n    let depth = parent ? parent.getDepth() + 1 : 0;\n    /**\n     * Track which states are currently active.\n     */\n    const activeStates = { initial: true, animate: true };\n    /**\n     * A map of functions that, when called, will remove event listeners for\n     * a given gesture.\n     */\n    const gestureSubscriptions = {};\n    /**\n     * Initialise a context to share through motion states. This\n     * will be populated by variant names (if any).\n     */\n    const context = {};\n    for (const name of stateTypes) {\n        context[name] =\n            typeof options[name] === \"string\"\n                ? options[name]\n                : parent === null || parent === void 0 ? void 0 : parent.getContext()[name];\n    }\n    /**\n     * If initial is set to false we use the animate prop as the initial\n     * animation state.\n     */\n    const initialVariantSource = options.initial === false ? \"animate\" : \"initial\";\n    /**\n     * Destructure an initial target out from the resolved initial variant.\n     */\n    let _a = resolveVariant(options[initialVariantSource] || context[initialVariantSource], options.variants) || {}, target = __rest(_a, [\"transition\"]);\n    /**\n     * The base target is a cached map of values that we'll use to animate\n     * back to if a value is removed from all active state types. This\n     * is usually the initial value as read from the DOM, for instance if\n     * it hasn't been defined in initial.\n     */\n    const baseTarget = Object.assign({}, target);\n    /**\n     * A generator that will be processed by the global animation scheduler.\n     * This yeilds when it switches from reading the DOM to writing to it\n     * to prevent layout thrashing.\n     */\n    function* animateUpdates() {\n        var _a, _b;\n        const prevTarget = target;\n        target = {};\n        const animationOptions = {};\n        for (const name of stateTypes) {\n            if (!activeStates[name])\n                continue;\n            const variant = resolveVariant(options[name]);\n            if (!variant)\n                continue;\n            for (const key in variant) {\n                if (key === \"transition\")\n                    continue;\n                target[key] = variant[key];\n                animationOptions[key] = getOptions((_b = (_a = variant.transition) !== null && _a !== void 0 ? _a : options.transition) !== null && _b !== void 0 ? _b : {}, key);\n            }\n        }\n        const allTargetKeys = new Set([\n            ...Object.keys(target),\n            ...Object.keys(prevTarget),\n        ]);\n        const animationFactories = [];\n        allTargetKeys.forEach((key) => {\n            var _a;\n            if (target[key] === undefined) {\n                target[key] = baseTarget[key];\n            }\n            if (hasChanged(prevTarget[key], target[key])) {\n                (_a = baseTarget[key]) !== null && _a !== void 0 ? _a : (baseTarget[key] = style.get(element, key));\n                animationFactories.push(animateStyle(element, key, target[key], animationOptions[key]));\n            }\n        });\n        // Wait for all animation states to read from the DOM\n        yield;\n        const animations = animationFactories\n            .map((factory) => factory())\n            .filter(Boolean);\n        if (!animations.length)\n            return;\n        const animationTarget = target;\n        element.dispatchEvent(motionEvent(\"motionstart\", animationTarget));\n        Promise.all(animations.map((animation) => animation.finished))\n            .then(() => {\n            element.dispatchEvent(motionEvent(\"motioncomplete\", animationTarget));\n        })\n            .catch(noop);\n    }\n    const setGesture = (name, isActive) => () => {\n        activeStates[name] = isActive;\n        scheduleAnimation(state);\n    };\n    const updateGestureSubscriptions = () => {\n        for (const name in gestures) {\n            const isGestureActive = gestures[name].isActive(options);\n            const remove = gestureSubscriptions[name];\n            if (isGestureActive && !remove) {\n                gestureSubscriptions[name] = gestures[name].subscribe(element, {\n                    enable: setGesture(name, true),\n                    disable: setGesture(name, false),\n                }, options);\n            }\n            else if (!isGestureActive && remove) {\n                remove();\n                delete gestureSubscriptions[name];\n            }\n        }\n    };\n    const state = {\n        update: (newOptions) => {\n            if (!element)\n                return;\n            options = newOptions;\n            updateGestureSubscriptions();\n            scheduleAnimation(state);\n        },\n        setActive: (name, isActive) => {\n            if (!element)\n                return;\n            activeStates[name] = isActive;\n            scheduleAnimation(state);\n        },\n        animateUpdates,\n        getDepth: () => depth,\n        getTarget: () => target,\n        getOptions: () => options,\n        getContext: () => context,\n        mount: (newElement) => {\n            invariant(Boolean(newElement), \"Animation state must be mounted with valid Element\");\n            element = newElement;\n            mountedStates.set(element, state);\n            updateGestureSubscriptions();\n            return () => {\n                mountedStates.delete(element);\n                unscheduleAnimation(state);\n                for (const key in gestureSubscriptions) {\n                    gestureSubscriptions[key]();\n                }\n            };\n        },\n        isMounted: () => Boolean(element),\n    };\n    return state;\n}\n\nexport { createMotionState, mountedStates };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}